// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    created_at        Int?
    updated_at        Int?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String?  @map("user_id")
    accessToken  String?  @map("access_token")
    expires      DateTime
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model UserLink {
    id String @id @default(cuid())

    title       String
    url         String
    description String?
    icon        String?
    userId      String  @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_links")
}

model User {
    id    String  @id @default(cuid())
    name  String?
    email String? @unique
    login String? @unique
    image Json?

    loginId       Int?      @unique @map("login_id")
    bio           String?
    role          String?   @default("user")
    emailVerified DateTime? @map("email_verified")
    followers     Follows[] @relation("following")
    following     Follows[] @relation("follower")
    url           UserLink?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    accounts Account[]
    sessions Session[]
    posts     Post[]
    comments  Comment[]
    bookmarks Bookmark[]
    likes     Like[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @updatedAt @map(name: "updated_at")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   Json?
    image     String?
    published Boolean  @default(false)
    slug      String
    authorId  String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    author   User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    comments  Comment[]
    views     View[]
    bookmarks Bookmark[]
    likes     Like[]
    tags      Tag[]

    @@map("posts")
}

model Tag {
    id    String @id @default(cuid())
    name  String
    slug  String @unique
    posts Post[]

    @@map("tags")
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    postId    String
    authorId  String
    createdAt DateTime @default(now()) @map(name: "created_at")

    post   Post @relation(fields: [postId], references: [id])
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("comments")
}

model View {
    id        Int    @id @default(autoincrement())
    postId    String
    ipAddress String

    post Post @relation(fields: [postId], references: [id])

    @@map("views")
}

model Bookmark {
    id     String @id @default(cuid())
    userId String
    postId String

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@map("bookmarks")
}

model Like {
    postId    String
    userId    String
    createdAt DateTime @default(now()) @map(name: "created_at")

    dislike Boolean @default(false)

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
    @@map("likes")
}

model Follows {
    followerId  String
    followingId String

    follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
    @@map("follows")
}
