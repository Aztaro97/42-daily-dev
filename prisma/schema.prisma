// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int     @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    created_at        Int?
    updated_at        Int?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       Int?     @map("user_id")
    accessToken  String?  @map("access_token")
    expires      DateTime
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    login         String?   @unique
    image         String?
    emailVerified DateTime? @map("email_verified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")

    accounts Account[]
    sessions Session[]
    Post     Post[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @updatedAt @map(name: "updated_at")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   Json?
    published Boolean  @default(false)
    authorId  Int
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    tags      Tag[]

    author User? @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("posts")
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]

    @@map("tags")
}
